{"version":3,"sources":["hooks/SocketContext.js","hooks/TimesyncContext.js","components/Twemoji.js","components/Clock.js","hooks/ThemeContext.js","components/ThemeToggle.js","components/Root.js","App.js","serviceWorker.js","index.js"],"names":["SocketContext","createContext","SocketProvider","props","useState","io","process","socket","on","console","log","emit","Provider","value","children","useSocket","useContext","ts","require","TimesyncContext","TimesyncProvider","create","server","interval","timesync","send","_socket","data","timeout","Promise","resolve","reject","timeoutFn","setTimeout","clearTimeout","receive","useStyles","createUseStyles","container","width","size","height","display","inline","image","emoji","className","classes","join","dangerouslySetInnerHTML","__html","twemoji","parse","folder","ext","theme","flexDirection","alignItems","backgroundColor","colorSurface","transition","colorTransition","marginTop","marginBottom","padding","justifyContent","border","borderColor","colorContrast","color","borderRadius","boxSizing","number","fontSize","textAlign","lineHeight","button","opacity","outline","cursor","disabled","undefined","buttonText","fontFamily","buttonTexts","useTheme","now","setNow","useEffect","setInterval","useTime","clapTime","setClapTime","buttonTextIndex","setButtonTextIndex","buttonDisabled","setButtonDisabled","waiting","setWaiting","date","timeRemaining","secondsRemaining","Math","floor","Twemoji","random","length","onClick","darkTheme","colorSurfaceAccent","colorContrastLess","lightTheme","globalTheme","ThemeContext","ThemeProvider","isDark","setIsDark","alignSelf","margin","position","switch","top","left","isOn","emojiLeft","emojiRight","right","setIsOn","toggleTheme","useThemeToggle","root","overflow","App","Root","ThemeToggle","Clock","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8b23e9e.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = createContext({})\r\n\r\nconst SocketProvider = props => {\r\n  const [socket] = useState(io(process.env.REACT_APP_HOST))\r\n\r\n  socket.on('_ping_', () => {\r\n    console.log('ping recieved! ponging...')\r\n    socket.emit('_pong_')\r\n  })\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>\r\n      {props.children}\r\n    </SocketContext.Provider>\r\n  )\r\n}\r\n\r\nconst useSocket = () => {\r\n  return useContext(SocketContext)\r\n}\r\n\r\nconst useId = () => {\r\n  return useContext(SocketContext).id\r\n}\r\n\r\nexport { SocketProvider, SocketContext, useSocket, useId }\r\n","import React, { createContext, useState, useContext, useEffect } from 'react'\r\nimport { useSocket } from './SocketContext'\r\n\r\nconst ts = require('timesync')\r\nconst TimesyncContext = createContext({})\r\n\r\nconst TimesyncProvider = props => {\r\n  const socket = useSocket()\r\n  const [timesync] = useState(ts.create({\r\n    server: socket,\r\n    interval: 5000\r\n  }))\r\n\r\n  timesync.send = function (_socket, data, timeout) {\r\n    return new Promise(function (resolve, reject) {\r\n      var timeoutFn = setTimeout(reject, timeout)\r\n      _socket.emit('timesync', data, function () {\r\n        clearTimeout(timeoutFn)\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  socket.on('timesync', function (data) {\r\n    timesync.receive(null, data)\r\n  })\r\n\r\n  return (\r\n    <TimesyncContext.Provider value={timesync}>\r\n      {props.children}\r\n    </TimesyncContext.Provider>\r\n  )\r\n}\r\n\r\nconst useTime = interval => {\r\n  const timesync = useContext(TimesyncContext)\r\n  const [now, setNow] = useState(timesync.now())\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setNow(timesync.now())\r\n    }, interval)\r\n  }, [interval])\r\n  return now\r\n}\r\n\r\nconst useAlarm = () => {\r\n  const timesync = useContext(TimesyncContext)\r\n  return (date, cb) => {\r\n    const timer = setTimeout(cb, date - timesync.now())\r\n    return function cancel() {\r\n      clearTimeout(timer)\r\n    }\r\n  }\r\n}\r\n\r\nconst useNow = () => {\r\n  const timesync = useContext(TimesyncContext)\r\n  return timesync.now\r\n}\r\n\r\nexport { TimesyncProvider, TimesyncContext, useTime, useAlarm, useNow }\r\n","import React from 'react'\r\nimport twemoji from 'twemoji'\r\nimport { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n    container: {\r\n        width: ({size}) => size,\r\n        height: ({size}) => size,\r\n        display: ({inline}) => inline ? 'inline-block' : 'block'\r\n    },\r\n    image: {\r\n        width: ({size}) => size,\r\n        height: ({size}) => size,\r\n    }\r\n})\r\n\r\nexport default ({ emoji, size, inline, className }) => {\r\n    const classes = useStyles({size, inline})\r\n    return (<div\r\n        className={[classes.container, className].join(' ')}\r\n        dangerouslySetInnerHTML={{\r\n            __html: twemoji.parse(typeof emoji === 'string' ? emoji : '', {\r\n                folder: 'svg',\r\n                ext: '.svg',\r\n                className: classes.image\r\n            })\r\n        }}\r\n    />)\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { createUseStyles, useTheme } from 'react-jss'\r\nimport { useTime } from '../hooks/TimesyncContext'\r\nimport { useSocket } from '../hooks/SocketContext'\r\nimport Twemoji from './Twemoji'\r\n\r\nconst useStyles = createUseStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    backgroundColor: theme.colorSurface,\r\n    transition: theme.colorTransition,\r\n    marginTop: 200,\r\n    marginBottom: 80\r\n  },\r\n  display: {\r\n    width: 200,\r\n    height: 200,\r\n    padding: 40,\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    border: '2px solid',\r\n    borderColor: theme.colorContrast,\r\n    color: theme.colorContrast,\r\n    borderRadius: '50%',\r\n    boxSizing: 'border-box',\r\n    transition: theme.colorTransition,\r\n  },\r\n  number: {\r\n    fontSize: 100,\r\n    textAlign: 'center',\r\n    lineHeight: 100,\r\n    height: 100,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    transition: theme.colorTransition,\r\n  },\r\n  button: {\r\n    color: theme.colorContrast,\r\n    backgroundColor: 'transparent',\r\n    boxSizing: 'border-box',\r\n    border: 0,\r\n    padding: 10,\r\n    display: 'flex',\r\n    marginTop: 32,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    opacity: 0.5,\r\n    transition: 'opacity 0.5s',\r\n    outline: 'none !important',\r\n    cursor: props => props.disabled ? 'initial' : 'pointer',\r\n    transition: theme.colorTransition + ', opacity 0.5s',\r\n    '&:hover': {\r\n      opacity: props => props.disabled ? undefined : 1\r\n    }\r\n  },\r\n  buttonText: {\r\n    fontFamily: 'Montserrat',\r\n    fontSize: 24,\r\n  },\r\n  '@media (max-width: 767.98px)': {\r\n    container: {\r\n      marginTop: '80px',\r\n    }\r\n  }\r\n}))\r\n\r\nconst buttonTexts = [\r\n  'You ready?', \r\n  'Ready?', \r\n  'Let\\'s clap at five.', \r\n  'Top of the minute.', \r\n  'Thirty seconds?', \r\n  'You good?', \r\n  'Alright, ready?', \r\n  'Ready when you are.',\r\n  'Good to go?',\r\n  'Oh that was a good clap.',\r\n  'God that was a weak fucking clap.',\r\n  'Clap at ten?',\r\n  'Ready whenever.',\r\n  'Fuck I missed it. Fuck me.',\r\n  'Ah let\\'s do another one, mine was bad.',\r\n  'Alright, I\\'m set.'\r\n]\r\n\r\nexport default () => {\r\n  const theme = useTheme()\r\n  const now = useTime(5)\r\n  const [clapTime, setClapTime] = useState(0)\r\n  const [buttonTextIndex, setButtonTextIndex] = useState(0)\r\n  const [buttonDisabled, setButtonDisabled] = useState(false)\r\n  const [waiting, setWaiting] = useState(false)\r\n  const setButtonText = () => setButtonTextIndex(Math.floor(Math.random() * buttonTexts.length))\r\n  const socket = useSocket()\r\n  const classes = useStyles({disabled: buttonDisabled, theme})\r\n\r\n  useEffect(() => {\r\n    socket.on('clap', date => {\r\n      setClapTime(date)\r\n      setWaiting(true)\r\n    })\r\n  }, [])\r\n\r\n  const startClap = () => {\r\n    console.log('beginning clap...')\r\n    socket.emit('begin')\r\n    setButtonDisabled(true)\r\n  }\r\n\r\n  const timeRemaining = clapTime - now + 1000\r\n\r\n  let display\r\n  if (waiting) {\r\n    if (timeRemaining > 0) {\r\n      const secondsRemaining = Math.floor(timeRemaining / 1000)\r\n      if (secondsRemaining > 0) {\r\n        display = <div className={classes.number}>{secondsRemaining}</div>\r\n      }\r\n      else {\r\n        display = <Twemoji emoji={'👏'} size={'100%'}/>\r\n      }\r\n    }\r\n    else {\r\n      setButtonDisabled(false)\r\n      setWaiting(false)\r\n      setButtonText()\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.container}>\r\n      <div className={classes.display}>{ display }</div>\r\n      <button className={classes.button} onClick={startClap} disabled={buttonDisabled}>\r\n        <div className={classes.buttonText}>{'\"' + buttonTexts[buttonTextIndex] + '\"'}</div>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useContext, createContext } from 'react'\r\nimport { ThemeProvider as JSSThemeProvider } from 'react-jss'\r\n\r\nconst darkTheme = {\r\n    colorSurface: '#071e3d',\r\n    colorSurfaceAccent: '#1f4287',\r\n    colorContrastLess: '#278ea5',\r\n    colorContrast: '#21e6c1',\r\n}\r\n\r\nconst lightTheme = {\r\n    colorSurface: '#f1f6f9',\r\n    colorSurfaceAccent: '#9ba4b4',\r\n    colorContrastLess: '#394867',\r\n    colorContrast: '#14274e',\r\n}\r\n\r\nconst globalTheme = {\r\n    colorTransition: 'color 0.5s, background-color 0.5s, border-color 0.5s'\r\n}\r\n\r\nconst ThemeContext = createContext({})\r\n\r\nconst ThemeProvider = ({children}) => {\r\n    const [isDark, setIsDark] = useState(true)\r\n    return <ThemeContext.Provider value={{setIsDark, isDark}}>\r\n        <JSSThemeProvider theme={{...globalTheme, ...(isDark ? darkTheme : lightTheme)}}>\r\n            {children}\r\n        </JSSThemeProvider>\r\n    </ThemeContext.Provider>\r\n}\r\n\r\nconst useThemeToggle = () => {\r\n    const {isDark, setIsDark} = useContext(ThemeContext)\r\n    return () => {\r\n        setIsDark(!isDark)\r\n    }\r\n}\r\n\r\nexport {ThemeProvider, useThemeToggle}","import React, { useState, useEffect } from 'react'\r\nimport { createUseStyles, useTheme } from 'react-jss'\r\nimport { useThemeToggle } from '../hooks/ThemeContext'\r\nimport Twemoji from './Twemoji'\r\n\r\nconst useStyles = createUseStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        alignSelf: 'flex-end',\r\n        margin: 4,\r\n        opacity: 0.7\r\n    },\r\n    button: {\r\n        color: theme.colorSurfaceAccent,\r\n        backgroundColor: 'transparent',\r\n        boxSizing: 'border-box',\r\n        border: '3px solid',\r\n        borderColor: theme.colorSurfaceAccent,\r\n        borderRadius: 16,\r\n        height: 32,\r\n        width: 56,\r\n        margin: '0 4px',\r\n        position: 'relative',\r\n        cursor: 'pointer',\r\n        transition: theme.colorTransition,\r\n        outline: 'none !important',\r\n    },\r\n    switch: {\r\n        backgroundColor: theme.colorSurfaceAccent,\r\n        borderRadius: '50%',\r\n        height: 22,\r\n        width: 22,\r\n        transition: theme.colorTransition + ', left 0.5s',\r\n        position: 'absolute',\r\n        top: 2,\r\n        left: ({ isOn }) => isOn ? 26 : 2\r\n    },\r\n    emojiLeft: {\r\n        position: 'absolute',\r\n        top: 3,\r\n        left: 3,\r\n        opacity: ({ isOn }) => !isOn ? 0.2 : 1,\r\n        transition: 'opacity 0.5s',\r\n    },\r\n    emojiRight: {\r\n        position: 'absolute',\r\n        top: 3,\r\n        right: 3,\r\n        opacity: ({ isOn }) => isOn ? 0.2 : 1,\r\n        transition: 'opacity 0.5s',\r\n    }\r\n}))\r\n\r\nexport default () => {\r\n    const theme = useTheme()\r\n    const [isOn, setIsOn] = useState(false)\r\n    const classes = useStyles({ isOn, theme })\r\n    const toggleTheme = useThemeToggle()\r\n\r\n    const onClick = () => {\r\n        setIsOn(!isOn)\r\n        toggleTheme()\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <button onClick={onClick} className={classes.button}>\r\n                <Twemoji emoji={'☀️'} size={20} className={classes.emojiLeft}/>\r\n                <Twemoji emoji={'🌑'} size={20} className={classes.emojiRight}/>\r\n                <div className={classes.switch}></div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useTheme, createUseStyles } from 'react-jss'\r\nimport 'fontsource-montserrat'\r\n\r\nconst useStyles = createUseStyles(theme => ({\r\n    root: {\r\n        width: '100vw',\r\n        height: '100vh',\r\n        color: theme.colorContrast,\r\n        backgroundColor: theme.colorSurface,\r\n        transition: theme.colorTransition,\r\n        fontFamily: 'Montserrat',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        overflow: 'auto'\r\n    }\r\n}))\r\n\r\nexport default ({children}) => {\r\n    const theme = useTheme()\r\n    const classes = useStyles({theme})\r\n\r\n    return <div className={classes.root} >{children}</div>\r\n}","import React from 'react'\r\nimport './App.css'\r\nimport Clock from './components/Clock'\r\nimport ThemeToggle from './components/ThemeToggle'\r\nimport Root from './components/Root'\r\nimport { SocketProvider } from './hooks/SocketContext'\r\nimport { TimesyncProvider } from './hooks/TimesyncContext'\r\nimport { ThemeProvider } from './hooks/ThemeContext'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SocketProvider>\r\n        <TimesyncProvider>\r\n          <ThemeProvider>\r\n            <Root>\r\n              <ThemeToggle/>\r\n              <Clock />\r\n            </Root>\r\n          </ThemeProvider>\r\n        </TimesyncProvider>\r\n      </SocketProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}